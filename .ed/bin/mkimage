#!/usr/bin/env bash

SCRIPT_DIR=$(dirname $0)
APP_NAME=$(${SCRIPT_DIR}/app)
REL_NAME=$(${SCRIPT_DIR}/release_name)
RELEASE=_rel/${REL_NAME}
ERTS_VSN=$(${SCRIPT_DIR}/system_version)

# strip symbol information out of any ERTS binaries
for fat in $(file _rel/*/erts-*/bin/*|grep "not stripped"|awk '{print $1}'|cut -d: -f1); do
    strip $fat &>/dev/null;
done

i=0
BINARIES=()
for b in "$@"
do
    echo "analyzing ${b}"
    BINARIES[$i]=`which $b`
    ((++i))
done

# create bin dir if not exist
mkdir -p ${RELEASE}/bin


# copy any dynamically linked libaries used by ERTS into release
for lib in $(ldd _rel/*/erts-*/bin/* _rel/*/lib/*/priv/lib/*.so _rel/*/lib/*/priv/*.so $(which sh) ${BINARIES[@]} 2>/dev/null|grep "=>"|awk '{print $3}'|sort|uniq); do
    mkdir -p $(dirname ${RELEASE}$lib)
    cp -Lv $lib ${RELEASE}$lib
done

# ensure that the link loader is present
mkdir -p ${RELEASE}/lib64
cp /lib64/ld-linux*.so.* ${RELEASE}/lib64

# and a shell
cp /bin/sh ${RELEASE}/bin
for b in ${BINARIES[@]}
do
    echo copying $b to ${RELEASE}/bin
    cp $b ${RELEASE}/bin
done

# build the edocker_erlexec binary
gcc -DERTS_VERSION=\"${ERTS_VSN}\" -DREL_NAME="${REL_NAME}" -o ${RELEASE}/erts-"${ERTS_VSN}"/bin/edocker_erlexec ${SCRIPT_DIR}/../src/edocker_erlexec.c

mkdir -p ${RELEASE}/etc
echo "{lookup, [file, dns]}." > ${RELEASE}/etc/erl_inetrc
